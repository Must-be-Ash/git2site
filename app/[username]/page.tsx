import { notFound } from 'next/navigation';
import { connectDB } from '@/lib/db';
import { User } from '@/lib/models/user';
import { Repository } from '@/lib/models/repository';
import { PortfolioHeader } from '@/components/portfolio/header';
import { RepositoryGrid } from '@/components/portfolio/repository-grid';
import { ThemeProvider } from '@/components/providers/theme-provider';
import { themes } from '@/lib/themes';
import { StyledThemeProvider } from '@/components/StyledThemeProvider';

export async function generateMetadata({ params }: { params: { username: string } }) {
  return {
    title: `${params.username}'s Portfolio | Git2Site`,
    description: `View ${params.username}'s GitHub portfolio generated by Git2Site`,
  };
}

// Helper function to serialize Mongoose documents
function serializeDocument(doc: any) {
  const serialized = JSON.parse(JSON.stringify(doc));
  if (serialized._id) {
    serialized.id = serialized._id.toString();
    delete serialized._id;
  }
  return serialized;
}

export default async function PortfolioPage({ params }: { params: { username: string } }) {
  const { username } = params;
  
  try {
    await connectDB();
    
    const user = await User.findOne({ username });
    
    if (!user) {
      console.log(`User not found: ${username}`);
      return (
        <div className="min-h-screen flex items-center justify-center bg-background text-foreground">
          <div className="text-center">
            <h1 className="text-4xl font-bold mb-4">Portfolio Not Found</h1>
            <p className="mb-8">The requested portfolio doesn&apos;t exist or is still being generated.</p>
            <a href="/" className="text-primary hover:underline">Return to Home</a>
          </div>
        </div>
      );
    }

    const repositories = await Repository.find({ userId: user._id })
      .sort({ isFeatured: -1, stars: -1 });

    // Serialize the user and repositories
    const serializedUser = serializeDocument(user);
    const serializedRepositories = repositories.map(serializeDocument);

    return (
      <ThemeProvider
        attribute="class"
        defaultTheme={serializedUser.theme?.id || 'base'}
        forcedTheme={serializedUser.theme?.id || 'base'}
        themes={Object.keys(themes)}
      >
        <StyledThemeProvider theme={serializedUser.theme}>
          <main className="min-h-screen bg-background text-foreground">
            <PortfolioHeader user={serializedUser} />
            <div className="container px-4 py-8">
              <RepositoryGrid repositories={serializedRepositories} />
            </div>
          </main>
        </StyledThemeProvider>
      </ThemeProvider>
    );
  } catch (error) {
    console.error('Error in PortfolioPage:', error);
    return <div>An error occurred while loading the portfolio. Please try again later.</div>;
  }
}
