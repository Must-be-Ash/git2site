import { notFound } from 'next/navigation';
import { connectDB } from '@/lib/db';
import { User } from '@/lib/models/user';
import { Repository } from '@/lib/models/repository';
import { ThemeProvider } from '@/components/providers/theme-provider';
import { themes, ThemeName, getTheme } from '@/lib/themes';
import { StyledThemeProvider } from '@/components/StyledThemeProvider';
import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardFooter } from "@/components/ui/card";
import { Github, Globe, Linkedin, Twitter, Mail } from 'lucide-react';
import React from 'react';

// This is the correct way to set dynamic behavior for Next.js 13+
export const dynamic = 'force-dynamic';
export const revalidate = 0;

export async function generateMetadata({ params }: { params: { username: string } }) {
  return {
    title: `${params.username}'s Portfolio | Git2Site`,
    description: `View ${params.username}'s GitHub portfolio generated by Git2Site`,
  };
}

function serializeDocument(doc: any) {
  const serialized = JSON.parse(JSON.stringify(doc));
  if (serialized._id) {
    serialized.id = serialized._id.toString();
    delete serialized._id;
  }
  return serialized;
}

// Use a regular import instead
import RepositoryCard from '@/components/RepositoryCard';

export default async function PortfolioPage({ params }: { params: { username: string } }) {
  const { username } = params;
  
  console.log(`Attempting to load portfolio for username: ${username}`);

  try {
    await connectDB();
    
    const user = await User.findOne({ username });
    
    if (!user) {
      console.log(`User not found: ${username}`);
      notFound();
    }

    console.log('User found:', JSON.stringify(user, null, 2));

    const repositories = await Repository.find({ userId: user._id })
      .sort({ isFeatured: -1, stars: -1 });

    console.log(`Repositories found: ${repositories.length}`);

    const serializedUser = serializeDocument(user);
    const serializedRepositories = repositories.map(serializeDocument);

    console.log('Serialized user:', JSON.stringify(serializedUser, null, 2));

    const userTheme = serializedUser.theme || themes.base;
    const themeColors = userTheme.colors;

    return (
      <ThemeProvider
        attribute="class"
        defaultTheme={userTheme.name as ThemeName}
        forcedTheme={userTheme.name as ThemeName}
        themes={Object.keys(themes)}
      >
        <StyledThemeProvider theme={userTheme} colors={themeColors}>
          <main className="min-h-screen bg-background text-foreground" style={{fontFamily: userTheme.font}}>
            <div className="container mx-auto px-4 py-8">
              {/* Header */}
              <div className="mb-8 text-center">
                {serializedUser.avatar && (
                  <Image
                    src={serializedUser.avatar}
                    alt={serializedUser.name}
                    width={100}
                    height={100}
                    className="rounded-full mx-auto mb-4"
                  />
                )}
                <h1 className="text-3xl font-bold mb-2">{serializedUser.name}</h1>
                <p className="text-lg mb-4">{serializedUser.bio}</p>
                <div className="flex justify-center space-x-2">
                  {serializedUser.socialLinks?.linkedinUrl && (
                    <Link href={serializedUser.socialLinks.linkedinUrl} target="_blank" rel="noopener noreferrer" className="w-8 h-8 flex items-center justify-center rounded-md" style={{backgroundColor: themeColors.button, color: themeColors['button-foreground']}}>
                      <Linkedin className="w-5 h-5" />
                    </Link>
                  )}
                  {serializedUser.socialLinks?.twitterUrl && (
                    <Link href={serializedUser.socialLinks.twitterUrl} target="_blank" rel="noopener noreferrer" className="w-8 h-8 flex items-center justify-center rounded-md" style={{backgroundColor: themeColors.button, color: themeColors['button-foreground']}}>
                      <Twitter className="w-5 h-5" />
                    </Link>
                  )}
                  {serializedUser.socialLinks?.emailAddress && (
                    <Link href={`mailto:${serializedUser.socialLinks.emailAddress}`} target="_blank" rel="noopener noreferrer" className="w-8 h-8 flex items-center justify-center rounded-md" style={{backgroundColor: themeColors.button, color: themeColors['button-foreground']}}>
                      <Mail className="w-5 h-5" />
                    </Link>
                  )}
                </div>
              </div>

              {/* Projects */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-6xl mx-auto">
                {serializedRepositories.map((repo) => (
                  <RepositoryCard 
                    key={repo.id} 
                    repo={repo} 
                    themeColors={themeColors}
                    cardStyle={userTheme.cardStyle}
                    buttonStyle={userTheme.buttonStyle}
                    languageTagColor={themeColors.tag}
                    languageTagTextColor={themeColors['tag-foreground']}
                    borderColor={themeColors.primary}
                  />
                ))}
              </div>

              {/* Personal Domain */}
              {serializedUser.personalDomain && (
                <div className="mt-8 text-center">
                  <Link href={serializedUser.personalDomain} target="_blank" rel="noopener noreferrer" style={{color: themeColors.primary}} className="hover:underline">
                    {serializedUser.personalDomain}
                  </Link>
                </div>
              )}
            </div>
          </main>
        </StyledThemeProvider>
      </ThemeProvider>
    );
  } catch (error) {
    console.error('Error in PortfolioPage:', error);
    return <div>An error occurred while loading the portfolio. Please try again later.</div>;
  }
}
